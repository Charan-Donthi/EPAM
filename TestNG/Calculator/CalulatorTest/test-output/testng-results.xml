<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="25" ignored="0" total="92" passed="67">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="219" started-at="2020-02-28T11:47:52 IST" finished-at="2020-02-28T11:47:52 IST">
    <groups>
      <group name="Trignometry">
        <method signature="CalculatorTesting.testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" class="calculator.CalculatorTest.CalculatorTesting"/>
      </group> <!-- Trignometry -->
      <group name="Arthimetic">
        <method signature="CalculatorTesting.testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testDivForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForLong" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testMulForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForLong" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testSqrt(long, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSqrt" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" class="calculator.CalculatorTest.CalculatorTesting"/>
        <method signature="CalculatorTesting.testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" class="calculator.CalculatorTest.CalculatorTesting"/>
      </group> <!-- Arthimetic -->
    </groups>
    <test name="Default test" duration-ms="219" started-at="2020-02-28T11:47:52 IST" finished-at="2020-02-28T11:47:52 IST">
      <class name="calculator.CalculatorTest.CalculatorTesting">
        <test-method status="PASS" signature="objectCreation()[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="objectCreation" is-config="true" duration-ms="8" started-at="2020-02-28T11:47:52 IST" finished-at="2020-02-28T11:47:52 IST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- objectCreation -->
        <test-method status="FAIL" signature="testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" duration-ms="6" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCos" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.59846006905]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.59846006905] but found [-0.8011526357338304]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.59846006905] but found [-0.8011526357338304]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCos(CalculatorTesting.java:303)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCos -->
        <test-method status="FAIL" signature="testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" duration-ms="2" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCos" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.59846006905]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.59846006905] but found [0.8011526357338304]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.59846006905] but found [0.8011526357338304]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCos(CalculatorTesting.java:303)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCos -->
        <test-method status="FAIL" signature="testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCos" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[90]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.44807361612]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.44807361612] but found [0.8939966636005579]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.44807361612] but found [0.8939966636005579]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCos(CalculatorTesting.java:303)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCos -->
        <test-method status="FAIL" signature="testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCos" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.52532198881]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.52532198881] but found [0.8509035245341184]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.52532198881] but found [0.8509035245341184]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCos(CalculatorTesting.java:303)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCos -->
        <test-method status="FAIL" signature="testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCos" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.98438195063]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.98438195063] but found [-0.1760459464712114]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.98438195063] but found [-0.1760459464712114]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCos(CalculatorTesting.java:303)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCos -->
        <test-method status="FAIL" signature="testCos(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCos" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCos" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.98438195063]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.98438195063] but found [0.1760459464712114]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.98438195063] but found [0.1760459464712114]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCos(CalculatorTesting.java:303)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCos -->
        <test-method status="FAIL" signature="testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.74699881441]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.74699881441] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.74699881441] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCtg(CalculatorTesting.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCtg -->
        <test-method status="FAIL" signature="testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.74699881441]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.74699881441] but found [-1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.74699881441] but found [-1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCtg(CalculatorTesting.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCtg -->
        <test-method status="FAIL" signature="testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[90]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.50120278338]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.50120278338] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.50120278338] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCtg(CalculatorTesting.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCtg -->
        <test-method status="FAIL" signature="testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.61736962378]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.61736962378] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.61736962378] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCtg(CalculatorTesting.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCtg -->
        <test-method status="FAIL" signature="testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-5.59161951959]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-5.59161951959] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-5.59161951959] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCtg(CalculatorTesting.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCtg -->
        <test-method status="FAIL" signature="testCtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testCtg" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingCtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5.59161951959]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [5.59161951959] but found [-1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [5.59161951959] but found [-1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testCtg(CalculatorTesting.java:344)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCtg -->
        <test-method status="FAIL" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.0] but found [NaN]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.0] but found [NaN]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testDivForDouble(CalculatorTesting.java:193)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="PASS" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-0.125]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="PASS" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="PASS" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0E9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0E7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[100.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="PASS" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="PASS" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="PASS" signature="testDivForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForDouble -->
        <test-method status="FAIL" signature="testDivForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForLong" duration-ms="8" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForLong" finished-at="2020-02-28T11:47:52 IST">
          <exception class="org.testng.internal.reflect.MethodMatcherException">
            <message>
              <![CDATA[
[public void calculator.CalculatorTest.CalculatorTesting.testDivForLong(long,long,long)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: testDivForLong([Parameter{index=0, type=long, declaredAnnotations=[]}, Parameter{index=1, type=long, declaredAnnotations=[]}, Parameter{index=2, type=long, declaredAnnotations=[]}])
Arguments: [(java.lang.Double) 1.1,(java.lang.Integer) -1,(java.lang.Double) -1.1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.reflect.MethodMatcherException: 
[public void calculator.CalculatorTest.CalculatorTesting.testDivForLong(long,long,long)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: testDivForLong([Parameter{index=0, type=long, declaredAnnotations=[]}, Parameter{index=1, type=long, declaredAnnotations=[]}, Parameter{index=2, type=long, declaredAnnotations=[]}])
Arguments: [(java.lang.Double) 1.1,(java.lang.Integer) -1,(java.lang.Double) -1.1]
at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:43)
at org.testng.internal.Parameters.injectParameters(Parameters.java:925)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:34)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.reflect.MethodMatcherException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForLong -->
        <test-method status="FAIL" signature="testDivForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[Attempt to divide by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: Attempt to divide by zero
at com.epam.tat.module4.Calculator.div(Calculator.java:34)
at calculator.CalculatorTest.CalculatorTesting.testDivForLong(CalculatorTesting.java:174)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForLong -->
        <test-method status="PASS" signature="testDivForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForLong -->
        <test-method status="PASS" signature="testDivForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testDivForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingDivForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000000000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDivForLong -->
        <test-method status="PASS" signature="testIsNegative(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsNegative" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsNegativity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNegative -->
        <test-method status="PASS" signature="testIsNegative(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsNegative" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsNegativity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9223372036854775808]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNegative -->
        <test-method status="PASS" signature="testIsNegative(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsNegative" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsNegativity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-231342]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNegative -->
        <test-method status="PASS" signature="testIsNegative(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsNegative" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsNegativity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsNegative -->
        <test-method status="PASS" signature="testIsPositivity(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsPositivity" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsPositivity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[9223372036854775807]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPositivity -->
        <test-method status="PASS" signature="testIsPositivity(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsPositivity" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsPositivity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[231342]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPositivity -->
        <test-method status="PASS" signature="testIsPositivity(long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testIsPositivity" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingIsPositivity" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPositivity -->
        <test-method status="PASS" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="PASS" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="PASS" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[81]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="PASS" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0E9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0E7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0E16]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="PASS" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="FAIL" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-1.1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-1.1] but found [-2.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-1.1] but found [-2.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testMulForDouble(CalculatorTesting.java:148)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="PASS" signature="testMulForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForDouble -->
        <test-method status="PASS" signature="testMulForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForLong -->
        <test-method status="FAIL" signature="testMulForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForLong" duration-ms="7" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForLong" finished-at="2020-02-28T11:47:52 IST">
          <exception class="org.testng.internal.reflect.MethodMatcherException">
            <message>
              <![CDATA[
[public void calculator.CalculatorTest.CalculatorTesting.testMulForLong(long,long,long)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: testMulForLong([Parameter{index=0, type=long, declaredAnnotations=[]}, Parameter{index=1, type=long, declaredAnnotations=[]}, Parameter{index=2, type=long, declaredAnnotations=[]}])
Arguments: [(java.lang.Double) 1.1,(java.lang.Integer) -1,(java.lang.Integer) -1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.internal.reflect.MethodMatcherException: 
[public void calculator.CalculatorTest.CalculatorTesting.testMulForLong(long,long,long)] has no parameters defined but was found to be using a data provider (either explicitly specified or inherited from class level annotation).
Data provider mismatch
Method: testMulForLong([Parameter{index=0, type=long, declaredAnnotations=[]}, Parameter{index=1, type=long, declaredAnnotations=[]}, Parameter{index=2, type=long, declaredAnnotations=[]}])
Arguments: [(java.lang.Double) 1.1,(java.lang.Integer) -1,(java.lang.Integer) -1]
at org.testng.internal.reflect.DataProviderMethodMatcher.getConformingArguments(DataProviderMethodMatcher.java:43)
at org.testng.internal.Parameters.injectParameters(Parameters.java:925)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:34)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.reflect.MethodMatcherException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForLong -->
        <test-method status="PASS" signature="testMulForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForLong -->
        <test-method status="PASS" signature="testMulForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[81]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForLong -->
        <test-method status="PASS" signature="testMulForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testMulForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingMulForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000000000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[10000000000000000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMulForLong -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[81]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0E9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0E27]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.9090909090909091]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testPow(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testPow" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingPow" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPow -->
        <test-method status="PASS" signature="testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSin" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.8011526357338304]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSin -->
        <test-method status="PASS" signature="testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSin" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.8011526357338304]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSin -->
        <test-method status="PASS" signature="testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" duration-ms="6" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSin" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[90]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.8939966636005579]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSin -->
        <test-method status="PASS" signature="testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSin" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.8509035245341184]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSin -->
        <test-method status="PASS" signature="testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSin" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.1760459464712114]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSin -->
        <test-method status="PASS" signature="testSin(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSin" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSin" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.1760459464712114]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSin -->
        <test-method status="PASS" signature="testSqrt(long, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSqrt" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSqrt" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrt -->
        <test-method status="PASS" signature="testSqrt(long, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSqrt" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSqrt" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrt -->
        <test-method status="PASS" signature="testSqrt(long, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSqrt" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSqrt" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[6.708203932499369]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrt -->
        <test-method status="PASS" signature="testSqrt(long, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSqrt" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSqrt" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3.1622776601683795]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrt -->
        <test-method status="FAIL" signature="testSqrtForNegativeValues()[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSqrtForNegativeValues" duration-ms="0" started-at="2020-02-28T11:47:52 IST" finished-at="2020-02-28T11:47:52 IST">
          <exception class="org.testng.TestException">
            <message>
              <![CDATA[
Method CalculatorTesting.testSqrtForNegativeValues()[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c] should have thrown an exception of type class java.lang.Exception]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestException: 
Method CalculatorTesting.testSqrtForNegativeValues()[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c] should have thrown an exception of type class java.lang.Exception
at org.testng.internal.ExpectedExceptionsHolder.noException(ExpectedExceptionsHolder.java:82)
at org.testng.internal.TestInvoker.considerExceptions(TestInvoker.java:729)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:616)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSqrtForNegativeValues -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0E9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0E7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9.9E8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2.1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForDouble -->
        <test-method status="PASS" signature="testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForLong -->
        <test-method status="PASS" signature="testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForLong -->
        <test-method status="PASS" signature="testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForLong -->
        <test-method status="PASS" signature="testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000000000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[990000000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForLong -->
        <test-method status="PASS" signature="testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForLong -->
        <test-method status="PASS" signature="testSubForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSubForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSubForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9223372036854775808]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9223372036854775808]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubForLong -->
        <test-method status="PASS" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="PASS" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="PASS" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="PASS" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.0E9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.0E7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.01E9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="PASS" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="FAIL" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1.1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0.1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.1] but found [0.10000000000000009]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.1] but found [0.10000000000000009]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testSumForDouble(CalculatorTesting.java:54)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="PASS" signature="testSumForDouble(double, double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForDouble" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForDouble" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4.9E-324]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1.0E-323]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForDouble -->
        <test-method status="PASS" signature="testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForLong -->
        <test-method status="PASS" signature="testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForLong -->
        <test-method status="PASS" signature="testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[-18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForLong -->
        <test-method status="PASS" signature="testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000000000]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000000]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1010000000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForLong -->
        <test-method status="PASS" signature="testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForLong -->
        <test-method status="PASS" signature="testSumForLong(long, long, long)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testSumForLong" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingSumForLong" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-9223372036854775808]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-9223372036854775808]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumForLong -->
        <test-method status="FAIL" signature="testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.33869021035]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [1.33869021035] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [1.33869021035] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testtg(CalculatorTesting.java:364)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testtg -->
        <test-method status="FAIL" signature="testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-180]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1.33869021035]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-1.33869021035] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-1.33869021035] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testtg(CalculatorTesting.java:364)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testtg -->
        <test-method status="FAIL" signature="testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" duration-ms="0" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[90]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1.99520041221]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-1.99520041221] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-1.99520041221] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testtg(CalculatorTesting.java:364)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testtg -->
        <test-method status="FAIL" signature="testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1.61977519054]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [1.61977519054] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [1.61977519054] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testtg(CalculatorTesting.java:364)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testtg -->
        <test-method status="FAIL" signature="testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-0.17883906379]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [-0.17883906379] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [-0.17883906379] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testtg(CalculatorTesting.java:364)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testtg -->
        <test-method status="FAIL" signature="testtg(double, double)[pri:0, instance:calculator.CalculatorTest.CalculatorTesting@6d7b4f4c]" name="testtg" duration-ms="1" started-at="2020-02-28T11:47:52 IST" data-provider="dataProviderForTestingtg" finished-at="2020-02-28T11:47:52 IST">
          <params>
            <param index="0">
              <value>
                <![CDATA[-270]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.17883906379]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [0.17883906379] but found [1.0]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [0.17883906379] but found [1.0]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertEquals(Assert.java:640)
at org.testng.Assert.assertEquals(Assert.java:651)
at calculator.CalculatorTest.CalculatorTesting.testtg(CalculatorTesting.java:364)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testtg -->
      </class> <!-- calculator.CalculatorTest.CalculatorTesting -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
